plugins {
    id 'java'
    id 'application'
    id 'jacoco'
    id 'checkstyle'
    id 'antlr'
}

group 'ru.itmo.corp.jbevm'
version '1.0-SNAPSHOT'

sourceCompatibility = 11
targetCompatibility = 11

application {
    mainClass = 'ru.itmo.corp.jbevm.Main'
}

configurations {
  compile {
    extendsFrom = extendsFrom.findAll { it != configurations.antlr }
  }
}

// Create a single .jar with all dependencies
tasks.register('uberJar', Jar) {
    archiveClassifier = 'uber'
    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}

generateGrammarSource {
    outputDirectory = new File("src/main/java/ru/itmo/corp/jbevm/antlr")
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    antlr "org.antlr:antlr4:4.10.1"
    compile "org.antlr:antlr4-runtime:4.10.1"
}

generateGrammarSource {
    maxHeapSize = "128m"

    // Keep a copy of generated sources
    doLast {
        println "Copying generated grammar lexer/parser files to main directory."
        copy {
            from "${buildDir}/generated-src/antlr/main"
            into "generated-src/main/java"
        }
    }
}

checkstyle {
    ignoreFailures = false
    maxWarnings = 0
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

checkstyleMain {
    source 'src/main/java'
    exclude '**/antlr/**'
}

checkstyleTest {
    source 'src/test/java'
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
      xml.required = true
      html.required = true
      csv.required = true
    }
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

clean.doLast {
    file('generated-src').deleteDir()
}
